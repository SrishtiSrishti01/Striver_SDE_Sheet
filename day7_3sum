    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> list = new ArrayList<>();
        
        for(int i = 0; i < nums.length-2; i++) {
            if(i==0|| (i>0 && nums[i]!=nums[i-1])) { 
                List<List<Integer>> currList = twoSum(nums, 0-nums[i], i+1);
                if(currList.size()==0) continue;
                for(List arr : currList) {
                    arr.add(nums[i]);
                    // if(!list.contains(arr))
                    list.add(arr);
                }
            }
            
        }
        return list;
        
    }
    
    public List<List<Integer>> twoSum(int[] nums, int sum, int idx) {
        
        int low = idx; 
        int high = nums.length-1;
        
        List<List<Integer>> ans = new ArrayList<>();
        
        while(low<high) {
            int currSum = nums[low]+nums[high];
            if( currSum== sum) {
                
                List<Integer> list = new ArrayList<>();
                list.add(nums[low]);
                list.add(nums[high]);
                ans.add(list);
                while (low < high && nums[low] == nums[low+1]) low++;
                while (low < high && nums[high] == nums[high-1]) high--;
                low++;
                high--;
                
            }
            
            else if(currSum > sum) high--;
            else low++; 
            
        }
        
        return ans;
        
    }
