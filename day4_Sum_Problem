class Solution {
    public int[] twoSum(int[] nums, int target) {
        
//         int[] arr = new int[2];
//         int[] clone = nums.clone();

//         Arrays.sort(clone);
//         int low = 0;
//         int high = nums.length-1;
        
//         while(low<high) {
//             int sum = clone[low] + clone[high];
//             if(sum > target) {
//                 high = high-1;
//             } else if(sum<target) {
//                 low = low+1;
//             } else {
//                 arr[0] = clone[low];
//                 arr[1] = clone[high];
//                 break;
//             }
//         }
        
//         for(int i = 0; i < nums.length; i++) {
//             if(arr[0] == nums[i]) {
//                 arr[0] = i;
//                 break;
//             }
//         }
        
//         for(int i = 0; i < nums.length; i++) {
//             if(arr[1] == nums[i] && i!=arr[0]) {
//                 arr[1] = i;
//                 break;
//             }
//         }
        
//         Arrays.sort(arr);
//         return arr;
        
        HashMap<Integer, Integer> map = new HashMap<>();
        int[] ans = new int[2];
        
        for(int i = 0; i < nums.length; i++) {
            if(map.containsKey(target-nums[i])) {
                
                ans[0] = map.get(target-nums[i]);
                ans[1] = i;
                break;
            }
            map.put(nums[i], i);
        }
       return ans; 
    }
}
