class Solution {
    public void setZeroes(int[][] matrix) {
        
        
        
        //Additional Memory approach 
        //Space complexity :- O(M+N)
        
//         HashSet<Integer> mapRow = new HashSet<>();
//         HashSet<Integer> mapCol = new HashSet<>();
        
//         for(int i = 0; i < matrix.length; i++) {
//             for(int j = 0; j < matrix[0].length; j++) {
//                 if(matrix[i][j]==0) {
//                     mapRow.add(i);
//                     mapCol.add(j);
//                 }
//             }
//         }
        
//          for(int i = 0; i < matrix.length; i++) {
//             for(int j = 0; j < matrix[0].length; j++) {
//                 if(mapRow.contains(i)|| mapCol.contains(j)) {
//                     matrix[i][j]=0;
//                 }
//             }
//         }
        
        
        //space optimised approach
        //Space complexity :- O(1) 
        
        int rows = matrix.length; 
        int cols = matrix[0].length;
        Boolean col0 = false;
        for(int i = 0; i < rows; i++) {
            if(matrix[i][0] == 0) col0 = true;
            for(int j = 1; j < cols; j++) {
                if(matrix[i][j] == 0) {
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        
        for(int i = 1; i < rows; i++) {
            for(int j = 1; j < cols; j++) {
                if(matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }
        
    if (matrix[0][0] == 0) {
      for (int j = 0; j < cols; j++) {
        matrix[0][j] = 0;
      }
    }
        
        if(col0) {
            for(int i = 0;i < rows; i++) {
                matrix[i][0] = 0;
            }
        }
        
    }
}
