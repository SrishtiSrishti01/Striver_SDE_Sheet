class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        
        
        
        //BY USING SLIDING WINDOW METHOD
        
//         int j = 0,i=0,count = 0;
//         int max = 0;
//         char[] arr = new char[256];
//         while(j<s.length()){
//             if(arr[s.charAt(j)]==0) count++;
//             arr[s.charAt(j)]++;
//             // if(count<k){
//             //     //j++;
//             // }
//             if(count == j-i+1){
//                 max = Math.max(max,j-i+1);
//                 //j++;
//             }
//            // else if(count>k){
//                 while(count<j-i+1){
//                     arr[s.charAt(i)]--;
//                     if(arr[s.charAt(i)]==0) count--;
//                     i++;
//                 }
//                 j++;
//             //}
//         }
//         return max;
        
        
        //BY USING HASHSET DATA STRUCTURE
        int i = 0, j = 0;
        int max = 0;
        
        HashSet<Character> set = new HashSet<>();
        
        while(j<s.length()) {
            if(!set.contains(s.charAt(j))) {
                set.add(s.charAt(j));
                j++;
                max = Math.max(max, set.size());
            }
            
            else {
                set.remove(s.charAt(i));
                i++;
                
            }
        }
        
        return max;
        
        
        
    }
}
