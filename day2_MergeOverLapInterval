class Solution {
    public int[][] merge(int[][] intervals) {
        
//         Arrays.sort(intervals, (a,b) -> Integer.compare(a[0],b[0]));
        
//         int i = 0;
//         int j = 1;
//         int k = 0;
//         LinkedList<int[]> ans = new LinkedList<>();
        
//         for(int[] interval : intervals) {
            
//             if(ans.isEmpty() || ans.getLast()[1] < interval[0]) {
//                 ans.add(interval);
//             } else {
//                 ans.getLast()[1] = Math.max(ans.getLast()[1], interval[1]);
//             }
            
            
//         }
        
//         return ans.toArray(new int[ans.size()][]);
        int size = intervals.length;
        int[] start = new int[size];
        int[] end = new int[size];
        
        for(int i = 0; i < size; i++) {
            start[i] = intervals[i][0];
            end[i] = intervals[i][1];
        }
        
        Arrays.sort(start);
        Arrays.sort(end);
        
        ArrayList<int[]> arr = new ArrayList<>();
        
        for(int i = 0,j = 0; i < size; i++) {
            if(i == size-1 || start[i+1] > end[i]) {
                int[] ans = new int[2];
                ans[0] = start[j];
                ans[1] = end[i];
                j = i+1;
                arr.add(ans);
            }
        }
        
        return arr.toArray(new int[arr.size()][]);        
    }
 }
